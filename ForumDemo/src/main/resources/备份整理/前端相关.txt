 callback使用:
     function request(uri, callback) {
        $.ajax({
          url: uri,
          method: 'get',
          success: function (data) {
            callback(null, data)
          },
          error: function (xhr, textStatus, errorThrown) {
            callback(errorThrown)
          }
        })
      }

      // callback函数，参数列表规定，第一个参数为错误抛出，第二个参数为响应值
      request('http://baidu.com', function (err, data) {
        if (err) {
          // handle error
          return
        }
        // handle after request logic
        console.log(data)
      })
--------------------------------------------------------
$.ajax({
    url: '/userOpe/userRegister',   // 请求地址,
    type: 'POST',   // 请求方式
    contentType: 'application/json', //发送的数据类型
    data: JSON.stringify(sendData),
    //dataType: 'json',// 接受的数据类型,可不写
    success: function (result) {

    },
    error: function (result) {
        console.log('Send Request Fail..'); // 请求失败时的回调函数
    }
});

-------------------------------------------------------
第一版请求版本  方法挂在对象上

var obj = {};
var myutils = new MyUtils();

obj.register = function(callback){
    let username = $("#user_name").val();
    let password = $("#password").val();
    let sex = $("#sex").val();
    let address = $("#address").val();
    let email = $("#email").val();
    var sendData = {
        "userName":username,
        "password":password,
        "sex":sex,
        "address":address,
        "email":email
    };
    myutils.send(callback,'/userOpe/userRegister',sendData);
}


/**
 * 触发注册
 */
$(".register").unbind("click").bind("click",function(){
    obj.register(function(result){
        debugger;
        console.log(result)
    });
})

--------------------------------------------------------------
第2版请求版本  方法定义在对象内部,使用时需要把对象创建出来

var myutils = new MyUtils();
var obj = function(option){
    this.register = function (callback) {
        let username = $("#user_name").val();
        let password = $("#password").val();
        let sex = $("#sex").val();
        let address = $("#address").val();
        let email = $("#email").val();
        var sendData = {
            "userName":username,
            "password":password,
            "sex":sex,
            "address":address,
            "email":email
        };
        myutils.send(callback,'/userOpe/userRegister',sendData);
    };
};

/**
 * 触发注册
 */
$(".register").unbind("click").bind("click",function(){
    new obj().register(function(result){
        console.log(result)
    });
})

--------------------------------
原始弹框代码备份:
    /**
     * 弹框
     * @param msg  消息
     * @param type 弹框类型
     * @param millisecond 毫秒值
     */
    __THIS__.msgDialog = function(msg,type,millisecond){
        let dialogColor = __THIS__.dialogColorMap[type?type:__THIS__.DIALOG_DEFAULT];
        let style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML='.dialogStyleClassDiv{' +
            'opacity:0.8;z-index: 2000;' +
            'height:60px; width:120px;' +
            'background-color:'+dialogColor+';border-radius:8px;' +
            'text-align:center;font-size:24px;color:#fff;' +
            'position:absolute;top:50%;left:50%;transform: translate(-50%,-50%);' +
            '}' +
            '.dialogStyleClassP{' +
            'line-height: 60px;' +
            '}';
        // 把当前样式添加到 当前引用页面的head标签中
        $('head').append(style);
        var subhtml='<div id="msgDialog" style="overflow:hidden;"><div class="dialogStyleClassDiv"><p class="dialogStyleClassP">'+msg+'</p></div></div>';
        $("body").append(subhtml);
        // setInterval每间隔1000毫秒 执行一次__THIS__.autoCloseAlert函数
        // setInterval里面的函数不能有括号 __THIS__.autoCloseAlert() 写法错误
        var msgDialogStop = setInterval(autoCloseAlert,millisecond?millisecond:__THIS__.closeMilliSecond);
        //关闭弹框
        function autoCloseAlert(){
            // 加上淡出效果
            $('#msgDialog').fadeOut(700,'linear',function(){
                $('#msgDialog').remove();
                clearInterval(msgDialogStop);
            });
        }
    };
------------------------------------------
setInterval语法规范：

window.setInterval(调用函数，延时时间);

与setTimeout区别：

setTimeout是延时时间到了就去调用这个回调函数，只调用了一次 就结束了这个定时器。

setInterval是 每隔这个延迟时间 就去调用这个回调函数 会调用很多次 重复调用这个函数。

setInterval定时器
https://blog.csdn.net/m0_62962469/article/details/123799791



setTimeout(func,0)含义
setTimeout的作用是将代码推迟到指定时间执行，如果指定时间为0，即setTimeout(f,0)，那么会立刻执行吗？ 答案是不会
2.1 setTimeout(f,0)应用 调整事件的发生顺序
setTimeout(f,0)有几个非常重要的用途。它的一大应用是，可以调整事件的发生顺序。
比如，网页开发中，某个事件先发生在子元素，然后冒泡到父元素，即子元素的事件回调函数，会早于父元素的事件回调函数触发。
如果，我们先让父元素的事件回调函数先发生，就要用到setTimeout(f, 0)。
原文链接：https://blog.csdn.net/weixin_41989250/article/details/129065758


JS实现长按事件功能
https://blog.csdn.net/qq_44849271/article/details/124222716
--------------------------------------------
js动态往head中添加或删除style节点
https://blog.csdn.net/chijiangwo8270/article/details/100930831

<script>
//添加
var style = document.createElement('style');
style.type = 'text/css';
style.id = 'add-style-id';
style.innerHTML='body{ background-color:#ddd; }';
document.getElementsByTagName('head').item(0).appendChild(style);
//删除
setTimeout(function(){
document.getElementsByTagName('head').item(0).removeChild(document.getElementById('add-style-id'))
},5000)
//不支持低版本IE
</script>
------------------------------
setInterval定时方法:
// setInterval每间隔closeMilliSecond毫秒 执行一次__THIS__.autoCloseAlert函数
// setInterval里面的函数不能有括号 __THIS__.autoCloseAlert() 写法错误
var msgDialogStop = setInterval(autoCloseAlert,millisecond?millisecond:__THIS__.closeMilliSecond);

------------------------------
外部函数获取ajax返回的数据
https://blog.csdn.net/sofeware333/article/details/99583076?utm_source=app&app_version=4.5.0


#####################js遍历的几种方式#########################################
        // 用七种方式遍历下列数组
        let arr = ['a', 'b', 'c', 'd', 'e', 'f'];


        //1、for循环
        console.log("for循环")
        for (let i = 0; i < arr.length; i++) {
            console.log(arr[i]);
        }
        console.log("----------------")

        // 2、for in 和for of
        // for in 只能打印index
        console.log("for in")
        for (const key in arr) {
            console.log(arr[key]);
        }
        console.log("----------------")
        // for of 打印值
        console.log("for of")
        for (const key of arr) {
            console.log(key);
        }
        console.log("----------------")

        //3、foreach
        console.log("foreach");
        arr.forEach((item, index) => {
            console.log(index + "=>" + item);
        })
        console.log("----------------")

        // 4、Symbol
        console.log("Symbol")
        let item = arr[Symbol.iterator]();
        for (const key in arr) {
            console.log(item.next().value)

        }
        console.log("----------------")

        //5、map
        // 数组.map()会返回一个新数组，数组的大小跟原始数组一样
        // 数组元素是函数返回的结果
        console.log("map")
        let newArr_map = arr.map((item, key) =>{
            console.log(item)
            return item*2;
        })
        console.log("----------------")

        // 6、filter
        // filtet是一个过滤器，也是返回一个新数组，原数组中满足返回要求的元素就复制到新数组中，不满足就不复制
        // 不会改变原数组的内容
        console.log("filter")
        let newArr_filter = arr.filter((item, key) =>{
            console.log(item);
            return item == 'a';
        })
        console.log("----------------")

        //7、Object.entries()
        // 简单说就是 Object.entries() 可以把一个对象的键值以数组的形式遍历出来
        console.log("Object.entries() ")
        let newArr_entries = Object.entries(arr);
        newArr_entries.forEach((item, index)=>{
            // item是个数组：['0','a']
            console.log( item[1]);

        })
#####################js遍历的几种方式#########################################

本地存储的sessionStoreage和localStorag的区别和使用
https://blog.csdn.net/h18377528386/article/details/122692687


设置localStorage有效期和过期时间的简单方法
总所周知localStorage默认是不会过期的，也没有可设置过期的api，如果要实现过期清除就需要自己实现一个api
https://www.jb51.net/article/239130.htm

JavaScript时间戳的应用
https://blog.csdn.net/m0_51573433/article/details/125754201

时间戳说明:
时间戳：是指从格林威治时间1970年01月01日00时00分00秒（UTC/GMT的午夜，即北京时间1970年01月01日08时00分00秒）起至现在的总秒数
var init = new Date('1970-01-01 08:00:00');
console.log(init.getTime());// 0
var init = new Date('1970-01-01 09:00:00');
console.log(init.getTime());// 3600000
一天的毫秒数:3600*24*1000 = 86400000

DIV高度获取  javaScript中的方法
$(".videoDesc")[0].scrollHeight


相对定位relative、绝对定位absolute、固定定位fixed
https://blog.csdn.net/qq_57215961/article/details/124367616


利用 页面元素距离浏览器工作区顶端/左端的距离 来实现一个提示框在页面不同位置时候保证提示信息显示的正确位置
https://www.cnblogs.com/fnz0/p/5510758.html
{
    元素距离文档顶端和左边的偏移值
         jq对象.offset().top
         jq对象.offset().left
    网页被卷起来的高度/宽度（即浏览器滚动条滚动后隐藏的页面内容高度）
         $(window).scrollTop()
         $(window).scrollLeft()
    页面元素距离浏览器工作区顶端的距离  =  元素距离文档顶端偏移值  -   网页被卷起来的高度
}


jquery在光标位置插入内容指定内容（input、textarea）通用
https://blog.csdn.net/gjwgjw1111/article/details/


判断页面中是否引入某个js、添加、移除js
https://blog.csdn.net/m0_37885651/article/details/82864721



###############js执行刷新当前页面的方法################
loaction.reload()
loaction.reload(true/false)
参数true表示强制刷新并不读取缓存,false更可能是缓存数据

location.replace(URL),可以理解成跳转。域名和端口不变
详情页:http://localhost:9090/zuopin_detail.html?zuopinId=1643564381092569089&userId=1643564380765413377
控制台执行:location.replace("user_register.html")
跳转到:http://localhost:9090/user_register.html


